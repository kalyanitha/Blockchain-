1) Contracts

2) Inheritance
pragma solidity ^0.5.0;
contract Contract_demo {
string message = &quot;Hello&quot;;
function dispMsg() public view returns (string memory) {
return message;
}
}
pragma solidity &gt;=0.4.22 &lt;0.6.0;
contract Parent {
uint256 internal sum;
function setValue() external {
uint256 a = 10;
uint256 b = 20;
sum = a + b;
}
}
contract child is Parent {
function getValue() external view returns (uint256) {
return sum;
}
}
contract caller {
child cc = new child();
function testInheritance() public returns (uint256) {
cc.setValue();
return cc.getValue();
}
B) Contracts, Inheritance, Constructors, Abstract Contracts, Interfaces
1) Contracts

2) Inheritance

Ms. Arti Bansode

88 | Page

SIES(Nerul) College of Arts, Science and Commerce

Outputs
function show_value() public view returns (uint256) {
return cc.getValue();
}
}



3) Abstract Contracts
pragma solidity ^0.5.17;
contract Calculator {
function getResult() external view returns (uint256);
}
contract Test is Calculator {
constructor() public {}
function getResult() external view returns (uint256) {
uint256 a = 1;
uint256 b = 2;
uint256 result = a + b;
return result;
}
}


4) Constructors
pragma solidity ^0.5.0;
// Creating a contract
contract constructorExample {
string str;
constructor() public {
str = &quot;GeeksForGeeks&quot;;
}
function getValue() public view returns (string memory) {
return str;
}
}

5) Interfaces

pragma solidity ^0.5.0;
interface Calculator {
function getResult() external view returns(uint);
}
contract Test is Calculator {
constructor() public {}
function getResult() external view returns(uint){
uint a = 1;
uint b = 2;
uint result = a + b;
return result;
}
}


